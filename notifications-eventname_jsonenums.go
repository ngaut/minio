// generated by jsonenums -type=EventName -prefix=notifications-; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_EventNameNameToValue = map[string]EventName{
		"ObjectCreatedPut":                     ObjectCreatedPut,
		"ObjectCreatedPost":                    ObjectCreatedPost,
		"ObjectCreatedCopy":                    ObjectCreatedCopy,
		"ObjectCreatedCompleteMultipartUpload": ObjectCreatedCompleteMultipartUpload,
		"ObjectRemovedDelete":                  ObjectRemovedDelete,
		"ObjectRemovedDeleteMarkerCreated":     ObjectRemovedDeleteMarkerCreated,
		"ReducedRedundancyLostObject":          ReducedRedundancyLostObject,
	}

	_EventNameValueToName = map[EventName]string{
		ObjectCreatedPut:                     "ObjectCreatedPut",
		ObjectCreatedPost:                    "ObjectCreatedPost",
		ObjectCreatedCopy:                    "ObjectCreatedCopy",
		ObjectCreatedCompleteMultipartUpload: "ObjectCreatedCompleteMultipartUpload",
		ObjectRemovedDelete:                  "ObjectRemovedDelete",
		ObjectRemovedDeleteMarkerCreated:     "ObjectRemovedDeleteMarkerCreated",
		ReducedRedundancyLostObject:          "ReducedRedundancyLostObject",
	}
)

func init() {
	var v EventName
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EventNameNameToValue = map[string]EventName{
			interface{}(ObjectCreatedPut).(fmt.Stringer).String():                     ObjectCreatedPut,
			interface{}(ObjectCreatedPost).(fmt.Stringer).String():                    ObjectCreatedPost,
			interface{}(ObjectCreatedCopy).(fmt.Stringer).String():                    ObjectCreatedCopy,
			interface{}(ObjectCreatedCompleteMultipartUpload).(fmt.Stringer).String(): ObjectCreatedCompleteMultipartUpload,
			interface{}(ObjectRemovedDelete).(fmt.Stringer).String():                  ObjectRemovedDelete,
			interface{}(ObjectRemovedDeleteMarkerCreated).(fmt.Stringer).String():     ObjectRemovedDeleteMarkerCreated,
			interface{}(ReducedRedundancyLostObject).(fmt.Stringer).String():          ReducedRedundancyLostObject,
		}
	}
}

// MarshalJSON is generated so EventName satisfies json.Marshaler.
func (r EventName) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EventNameValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid EventName: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so EventName satisfies json.Unmarshaler.
func (r *EventName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EventName should be a string, got %s", data)
	}
	v, ok := _EventNameNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid EventName %q", s)
	}
	*r = v
	return nil
}
